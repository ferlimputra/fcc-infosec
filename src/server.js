/** ******************************************
 * DO NOT EDIT THIS FILE
 * the verification process may break
 ****************************************** */

import { Router } from "express";
import { readFile } from "fs";
import { join } from "path";
import main from "./app.js";

const router = Router();

router.use((req, res, next) => {
  res.set({
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Headers":
      "Origin, X-Requested-With, content-type, Accept",
  });
  router.disable("x-powered-by");
  next();
});

router.get("/file/*?", (req, res, next) => {
  if (req.params[0] === ".env") {
    return next({ status: 401, message: "ACCESS DENIED" });
  }
  readFile(join(__dirname, req.params[0]), (err, data) => {
    if (err) {
      return next(err);
    }
    res.type("txt").send(data.toString());
  });
});

router.get("/app-info", (req, res) => {
  // list middlewares mounted on the '/' camper's app
  const appMainRouteStack = main._router.stack
    .filter(s => s.path === "")
    .map(l => l.name)
    // filter out express default middlewares
    .filter(
      n => !(n === "query" || n === "expressInit" || n === "serveStatic")
    );

  // filter out CORS Headers
  const hs = Object.keys(res._headers).filter(
    h => !h.match(/^access-control-\w+/)
  );
  const hObj = {};
  hs.forEach(h => {
    hObj[h] = res._headers[h];
  });
  delete res._headers["strict-transport-security"];
  res.json({ headers: hObj, appStack: appMainRouteStack });
});

router.get("/package.json", (req, res, next) => {
  readFile(`${__dirname}./package.json`, (err, data) => {
    if (err) {
      return next(err);
    }
    res.type("txt").send(data.toString());
  });
});

router.use((req, res, next) => {
  res
    .status(404)
    .type("txt")
    .send("Not Found");
});

export default router;

/** ******************************************
 * DO NOT EDIT THIS FILE
 * the verification process may break
 ****************************************** */
